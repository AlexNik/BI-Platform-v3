<?php

namespace Map;

use \–ü—Ä–æ–µ–∫—Ç—ã;
use \–ü—Ä–æ–µ–∫—Ç—ãQuery;
use Propel\Runtime\Propel;
use Propel\Runtime\ActiveQuery\Criteria;
use Propel\Runtime\ActiveQuery\InstancePoolTrait;
use Propel\Runtime\Connection\ConnectionInterface;
use Propel\Runtime\DataFetcher\DataFetcherInterface;
use Propel\Runtime\Exception\PropelException;
use Propel\Runtime\Map\RelationMap;
use Propel\Runtime\Map\TableMap;
use Propel\Runtime\Map\TableMapTrait;


/**
 * This class defines the structure of the '–ü—Ä–æ–µ–∫—Ç—ã' table.
 *
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 */
class –ü—Ä–æ–µ–∫—Ç—ãTableMap extends TableMap
{
    use InstancePoolTrait;
    use TableMapTrait;

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = '.Map.–ü—Ä–æ–µ–∫—Ç—ãTableMap';

    /**
     * The default database name for this class
     */
    const DATABASE_NAME = 'default';

    /**
     * The table name for this class
     */
    const TABLE_NAME = '–ü—Ä–æ–µ–∫—Ç—ã';

    /**
     * The related Propel class for this table
     */
    const OM_CLASS = '\\–ü—Ä–æ–µ–∫—Ç—ã';

    /**
     * A class that can be returned by this tableMap
     */
    const CLASS_DEFAULT = '–ü—Ä–æ–µ–∫—Ç—ã';

    /**
     * The total number of columns
     */
    const NUM_COLUMNS = 12;

    /**
     * The number of lazy-loaded columns
     */
    const NUM_LAZY_LOAD_COLUMNS = 0;

    /**
     * The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS)
     */
    const NUM_HYDRATE_COLUMNS = 12;

    /**
     * the column name for the id field
     */
    const COL_ID = '–ü—Ä–æ–µ–∫—Ç—ã.id';

    /**
     * the column name for the –ö–æ–¥_–ø—Ä–æ–µ–∫—Ç–∞ field
     */
    const COL_–ö–û–î_–ü–†–û–ï–ö–¢–ê = '–ü—Ä–æ–µ–∫—Ç—ã.–ö–æ–¥_–ø—Ä–æ–µ–∫—Ç–∞';

    /**
     * the column name for the –ü—Ä–æ–µ–∫—Ç field
     */
    const COL_–ü–†–û–ï–ö–¢ = '–ü—Ä–æ–µ–∫—Ç—ã.–ü—Ä–æ–µ–∫—Ç';

    /**
     * the column name for the –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å field
     */
    const COL_–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨ = '–ü—Ä–æ–µ–∫—Ç—ã.–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å';

    /**
     * the column name for the –ó–∞–∫–∞–∑—á–∏–∫ field
     */
    const COL_–ó–ê–ö–ê–ó–ß–ò–ö = '–ü—Ä–æ–µ–∫—Ç—ã.–ó–∞–∫–∞–∑—á–∏–∫';

    /**
     * the column name for the –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ field
     */
    const COL_–ü–û–î–†–Ø–î–ß–ò–ö–ò = '–ü—Ä–æ–µ–∫—Ç—ã.–ü–æ–¥—Ä—è–¥—á–∏–∫–∏';

    /**
     * the column name for the –ü–µ—Ä–∏–æ–¥_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—Ä–∞–±–æ—Ç field
     */
    const COL_–ü–ï–†–ò–û–î_–í–´–ü–û–õ–ù–ï–ù–ò–Ø_–†–ê–ë–û–¢ = '–ü—Ä–æ–µ–∫—Ç—ã.–ü–µ—Ä–∏–æ–¥_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—Ä–∞–±–æ—Ç';

    /**
     * the column name for the –î–µ—Ç–∞–ª–∏_–ø—Ä–æ–µ–∫—Ç–∞ field
     */
    const COL_–î–ï–¢–ê–õ–ò_–ü–†–û–ï–ö–¢–ê = '–ü—Ä–æ–µ–∫—Ç—ã.–î–µ—Ç–∞–ª–∏_–ø—Ä–æ–µ–∫—Ç–∞';

    /**
     * the column name for the –¢–∏–ø_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ field
     */
    const COL_–¢–ò–ü_–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê = '–ü—Ä–æ–µ–∫—Ç—ã.–¢–∏–ø_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞';

    /**
     * the column name for the –ù–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞ field
     */
    const COL_–ù–ê–ó–í–ê–ù–ò–ï_–ü–ê–ü–ö–ò_–ü–†–û–ï–ö–¢–ê = '–ü—Ä–æ–µ–∫—Ç—ã.–ù–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞';

    /**
     * the column name for the –ö–∞—Ä—Ç–∏–Ω–∫–∞ field
     */
    const COL_–ö–ê–†–¢–ò–ù–ö–ê = '–ü—Ä–æ–µ–∫—Ç—ã.–ö–∞—Ä—Ç–∏–Ω–∫–∞';

    /**
     * the column name for the –ö–∞—Ä—Ç–æ—á–∫–∞_–ø—Ä–æ–µ–∫—Ç–∞ field
     */
    const COL_–ö–ê–†–¢–û–ß–ö–ê_–ü–†–û–ï–ö–¢–ê = '–ü—Ä–æ–µ–∫—Ç—ã.–ö–∞—Ä—Ç–æ—á–∫–∞_–ø—Ä–æ–µ–∫—Ç–∞';

    /**
     * The default string format for model objects of the related table
     */
    const DEFAULT_STRING_FORMAT = 'YAML';

    /**
     * holds an array of fieldnames
     *
     * first dimension keys are the type constants
     * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
     */
    protected static $fieldNames = array (
        self::TYPE_PHPNAME       => array('Id', '–∫–æ–¥–ø—Ä–æ–µ–∫—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–∑–∞–∫–∞–∑—á–∏–∫', '–ø–æ–¥—Ä—è–¥—á–∏–∫–∏', '–ø–µ—Ä–∏–æ–¥–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ä–∞–±–æ—Ç', '–¥–µ—Ç–∞–ª–∏–ø—Ä–æ–µ–∫—Ç–∞', '—Ç–∏–ø—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ–ø–∞–ø–∫–∏–ø—Ä–æ–µ–∫—Ç–∞', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∫–∞—Ä—Ç–æ—á–∫–∞–ø—Ä–æ–µ–∫—Ç–∞', ),
        self::TYPE_CAMELNAME     => array('id', '∫–æ–¥–ø—Ä–æ–µ–∫—Ç–∞', 'ø—Ä–æ–µ–∫—Ç', 'ÒÄ—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '∑–∞–∫–∞–∑—á–∏–∫', 'ø–æ–¥—Ä—è–¥—á–∏–∫–∏', 'ø–µ—Ä–∏–æ–¥–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ä–∞–±–æ—Ç', '¥–µ—Ç–∞–ª–∏–ø—Ä–æ–µ–∫—Ç–∞', 'ÒÇ–∏–ø—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', 'Ω–∞–∑–≤–∞–Ω–∏–µ–ø–∞–ø–∫–∏–ø—Ä–æ–µ–∫—Ç–∞', '∫–∞—Ä—Ç–∏–Ω–∫–∞', '∫–∞—Ä—Ç–æ—á–∫–∞–ø—Ä–æ–µ–∫—Ç–∞', ),
        self::TYPE_COLNAME       => array(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–û–î_–ü–†–û–ï–ö–¢–ê, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–†–û–ï–ö–¢, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ó–ê–ö–ê–ó–ß–ò–ö, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–û–î–†–Ø–î–ß–ò–ö–ò, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–ï–†–ò–û–î_–í–´–ü–û–õ–ù–ï–ù–ò–Ø_–†–ê–ë–û–¢, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–î–ï–¢–ê–õ–ò_–ü–†–û–ï–ö–¢–ê, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–¢–ò–ü_–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ù–ê–ó–í–ê–ù–ò–ï_–ü–ê–ü–ö–ò_–ü–†–û–ï–ö–¢–ê, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–ê–†–¢–ò–ù–ö–ê, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–ê–†–¢–û–ß–ö–ê_–ü–†–û–ï–ö–¢–ê, ),
        self::TYPE_FIELDNAME     => array('id', '–ö–æ–¥_–ø—Ä–æ–µ–∫—Ç–∞', '–ü—Ä–æ–µ–∫—Ç', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ó–∞–∫–∞–∑—á–∏–∫', '–ü–æ–¥—Ä—è–¥—á–∏–∫–∏', '–ü–µ—Ä–∏–æ–¥_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—Ä–∞–±–æ—Ç', '–î–µ—Ç–∞–ª–∏_–ø—Ä–æ–µ–∫—Ç–∞', '–¢–∏–ø_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞', '–ö–∞—Ä—Ç–∏–Ω–∫–∞', '–ö–∞—Ä—Ç–æ—á–∫–∞_–ø—Ä–æ–µ–∫—Ç–∞', ),
        self::TYPE_NUM           => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, )
    );

    /**
     * holds an array of keys for quick access to the fieldnames array
     *
     * first dimension keys are the type constants
     * e.g. self::$fieldKeys[self::TYPE_PHPNAME]['Id'] = 0
     */
    protected static $fieldKeys = array (
        self::TYPE_PHPNAME       => array('Id' => 0, '–∫–æ–¥–ø—Ä–æ–µ–∫—Ç–∞' => 1, '–ø—Ä–æ–µ–∫—Ç' => 2, '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' => 3, '–∑–∞–∫–∞–∑—á–∏–∫' => 4, '–ø–æ–¥—Ä—è–¥—á–∏–∫–∏' => 5, '–ø–µ—Ä–∏–æ–¥–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ä–∞–±–æ—Ç' => 6, '–¥–µ—Ç–∞–ª–∏–ø—Ä–æ–µ–∫—Ç–∞' => 7, '—Ç–∏–ø—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞' => 8, '–Ω–∞–∑–≤–∞–Ω–∏–µ–ø–∞–ø–∫–∏–ø—Ä–æ–µ–∫—Ç–∞' => 9, '–∫–∞—Ä—Ç–∏–Ω–∫–∞' => 10, '–∫–∞—Ä—Ç–æ—á–∫–∞–ø—Ä–æ–µ–∫—Ç–∞' => 11, ),
        self::TYPE_CAMELNAME     => array('id' => 0, '∫–æ–¥–ø—Ä–æ–µ–∫—Ç–∞' => 1, 'ø—Ä–æ–µ–∫—Ç' => 2, 'ÒÄ—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' => 3, '∑–∞–∫–∞–∑—á–∏–∫' => 4, 'ø–æ–¥—Ä—è–¥—á–∏–∫–∏' => 5, 'ø–µ—Ä–∏–æ–¥–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ä–∞–±–æ—Ç' => 6, '¥–µ—Ç–∞–ª–∏–ø—Ä–æ–µ–∫—Ç–∞' => 7, 'ÒÇ–∏–ø—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞' => 8, 'Ω–∞–∑–≤–∞–Ω–∏–µ–ø–∞–ø–∫–∏–ø—Ä–æ–µ–∫—Ç–∞' => 9, '∫–∞—Ä—Ç–∏–Ω–∫–∞' => 10, '∫–∞—Ä—Ç–æ—á–∫–∞–ø—Ä–æ–µ–∫—Ç–∞' => 11, ),
        self::TYPE_COLNAME       => array(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID => 0, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–û–î_–ü–†–û–ï–ö–¢–ê => 1, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–†–û–ï–ö–¢ => 2, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨ => 3, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ó–ê–ö–ê–ó–ß–ò–ö => 4, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–û–î–†–Ø–î–ß–ò–ö–ò => 5, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–ï–†–ò–û–î_–í–´–ü–û–õ–ù–ï–ù–ò–Ø_–†–ê–ë–û–¢ => 6, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–î–ï–¢–ê–õ–ò_–ü–†–û–ï–ö–¢–ê => 7, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–¢–ò–ü_–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê => 8, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ù–ê–ó–í–ê–ù–ò–ï_–ü–ê–ü–ö–ò_–ü–†–û–ï–ö–¢–ê => 9, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–ê–†–¢–ò–ù–ö–ê => 10, –ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–ê–†–¢–û–ß–ö–ê_–ü–†–û–ï–ö–¢–ê => 11, ),
        self::TYPE_FIELDNAME     => array('id' => 0, '–ö–æ–¥_–ø—Ä–æ–µ–∫—Ç–∞' => 1, '–ü—Ä–æ–µ–∫—Ç' => 2, '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' => 3, '–ó–∞–∫–∞–∑—á–∏–∫' => 4, '–ü–æ–¥—Ä—è–¥—á–∏–∫–∏' => 5, '–ü–µ—Ä–∏–æ–¥_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—Ä–∞–±–æ—Ç' => 6, '–î–µ—Ç–∞–ª–∏_–ø—Ä–æ–µ–∫—Ç–∞' => 7, '–¢–∏–ø_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞' => 8, '–ù–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞' => 9, '–ö–∞—Ä—Ç–∏–Ω–∫–∞' => 10, '–ö–∞—Ä—Ç–æ—á–∫–∞_–ø—Ä–æ–µ–∫—Ç–∞' => 11, ),
        self::TYPE_NUM           => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, )
    );

    /**
     * Initialize the table attributes and columns
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('–ü—Ä–æ–µ–∫—Ç—ã');
        $this->setPhpName('–ü—Ä–æ–µ–∫—Ç—ã');
        $this->setIdentifierQuoting(false);
        $this->setClassName('\\–ü—Ä–æ–µ–∫—Ç—ã');
        $this->setPackage('');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('id', 'Id', 'INTEGER', true, null, null);
        $this->addColumn('–ö–æ–¥_–ø—Ä–æ–µ–∫—Ç–∞', '–∫–æ–¥–ø—Ä–æ–µ–∫—Ç–∞', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ü—Ä–æ–µ–∫—Ç', '–ø—Ä–æ–µ–∫—Ç', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ó–∞–∫–∞–∑—á–∏–∫', '–∑–∞–∫–∞–∑—á–∏–∫', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ü–æ–¥—Ä—è–¥—á–∏–∫–∏', '–ø–æ–¥—Ä—è–¥—á–∏–∫–∏', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ü–µ—Ä–∏–æ–¥_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—Ä–∞–±–æ—Ç', '–ø–µ—Ä–∏–æ–¥–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ä–∞–±–æ—Ç', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–î–µ—Ç–∞–ª–∏_–ø—Ä–æ–µ–∫—Ç–∞', '–¥–µ—Ç–∞–ª–∏–ø—Ä–æ–µ–∫—Ç–∞', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–¢–∏–ø_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', '—Ç–∏–ø—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ù–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ–ø–∞–ø–∫–∏–ø—Ä–æ–µ–∫—Ç–∞', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ö–∞—Ä—Ç–∏–Ω–∫–∞', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', 'LONGVARCHAR', true, null, null);
        $this->addColumn('–ö–∞—Ä—Ç–æ—á–∫–∞_–ø—Ä–æ–µ–∫—Ç–∞', '–∫–∞—Ä—Ç–æ—á–∫–∞–ø—Ä–æ–µ–∫—Ç–∞', 'LONGVARCHAR', false, null, null);
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('–¥–∞—Ç—ã–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π–¥–∞—à–±–æ—Ä–¥–æ–≤', '\\–¥–∞—Ç—ã–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π–¥–∞—à–±–æ—Ä–¥–æ–≤', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–¥–∞—Ç—ã–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π–¥–∞—à–±–æ—Ä–¥–æ–≤s', false);
        $this->addRelation('–º—Ç—Ä', '\\–º—Ç—Ä', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–º—Ç—Äs', false);
        $this->addRelation('–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è', '\\–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—ès', false);
        $this->addRelation('–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º', '\\–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºs', false);
        $this->addRelation('–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è', '\\–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—ès', false);
        $this->addRelation('–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ–≤–æ–ø—Ä–æ—Å—ã', '\\–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ–≤–æ–ø—Ä–æ—Å—ã', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ–≤–æ–ø—Ä–æ—Å—ãs', false);
        $this->addRelation('–ø—Ä–æ–≥—Ä–∞–º–º—ã', '\\–ø—Ä–æ–≥—Ä–∞–º–º—ã', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '–ø—Ä–æ–≥—Ä–∞–º–º—ãs', false);
        $this->addRelation('—É—á–∞—Å—Ç–∫–∏—Ä–∞–±–æ—Ç', '\\—É—á–∞—Å—Ç–∫–∏—Ä–∞–±–æ—Ç', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü—Ä–æ–µ–∫—Ç',
    1 => ':id',
  ),
), null, null, '—É—á–∞—Å—Ç–∫–∏—Ä–∞–±–æ—Çs', false);
    } // buildRelations()

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param array  $row       resultset row.
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM
     *
     * @return string The primary key hash of the row
     */
    public static function getPrimaryKeyHashFromRow($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        // If the PK cannot be derived from the row, return NULL.
        if ($row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)] === null) {
            return null;
        }

        return null === $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)] || is_scalar($row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)]) || is_callable([$row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)], '__toString']) ? (string) $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)] : $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)];
    }

    /**
     * Retrieves the primary key from the DB resultset row
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, an array of the primary key columns will be returned.
     *
     * @param array  $row       resultset row.
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM
     *
     * @return mixed The primary key of the row
     */
    public static function getPrimaryKeyFromRow($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        return (int) $row[
            $indexType == TableMap::TYPE_NUM
                ? 0 + $offset
                : self::translateFieldName('Id', TableMap::TYPE_PHPNAME, $indexType)
        ];
    }
    
    /**
     * The class that the tableMap will make instances of.
     *
     * If $withPrefix is true, the returned path
     * uses a dot-path notation which is translated into a path
     * relative to a location on the PHP include_path.
     * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
     *
     * @param boolean $withPrefix Whether or not to return the path with the class name
     * @return string path.to.ClassName
     */
    public static function getOMClass($withPrefix = true)
    {
        return $withPrefix ? –ü—Ä–æ–µ–∫—Ç—ãTableMap::CLASS_DEFAULT : –ü—Ä–æ–µ–∫—Ç—ãTableMap::OM_CLASS;
    }

    /**
     * Populates an object of the default type or an object that inherit from the default.
     *
     * @param array  $row       row returned by DataFetcher->fetch().
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType The index type of $row. Mostly DataFetcher->getIndexType().
                                 One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM.
     *
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     * @return array           (–ü—Ä–æ–µ–∫—Ç—ã object, last column rank)
     */
    public static function populateObject($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        $key = –ü—Ä–æ–µ–∫—Ç—ãTableMap::getPrimaryKeyHashFromRow($row, $offset, $indexType);
        if (null !== ($obj = –ü—Ä–æ–µ–∫—Ç—ãTableMap::getInstanceFromPool($key))) {
            // We no longer rehydrate the object, since this can cause data loss.
            // See http://www.propelorm.org/ticket/509
            // $obj->hydrate($row, $offset, true); // rehydrate
            $col = $offset + –ü—Ä–æ–µ–∫—Ç—ãTableMap::NUM_HYDRATE_COLUMNS;
        } else {
            $cls = –ü—Ä–æ–µ–∫—Ç—ãTableMap::OM_CLASS;
            /** @var –ü—Ä–æ–µ–∫—Ç—ã $obj */
            $obj = new $cls();
            $col = $obj->hydrate($row, $offset, false, $indexType);
            –ü—Ä–æ–µ–∫—Ç—ãTableMap::addInstanceToPool($obj, $key);
        }

        return array($obj, $col);
    }

    /**
     * The returned array will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @param DataFetcherInterface $dataFetcher
     * @return array
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function populateObjects(DataFetcherInterface $dataFetcher)
    {
        $results = array();
    
        // set the class once to avoid overhead in the loop
        $cls = static::getOMClass(false);
        // populate the object(s)
        while ($row = $dataFetcher->fetch()) {
            $key = –ü—Ä–æ–µ–∫—Ç—ãTableMap::getPrimaryKeyHashFromRow($row, 0, $dataFetcher->getIndexType());
            if (null !== ($obj = –ü—Ä–æ–µ–∫—Ç—ãTableMap::getInstanceFromPool($key))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj->hydrate($row, 0, true); // rehydrate
                $results[] = $obj;
            } else {
                /** @var –ü—Ä–æ–µ–∫—Ç—ã $obj */
                $obj = new $cls();
                $obj->hydrate($row);
                $results[] = $obj;
                –ü—Ä–æ–µ–∫—Ç—ãTableMap::addInstanceToPool($obj, $key);
            } // if key exists
        }

        return $results;
    }
    /**
     * Add all the columns needed to create a new object.
     *
     * Note: any columns that were marked with lazyLoad="true" in the
     * XML schema will not be added to the select list and only loaded
     * on demand.
     *
     * @param Criteria $criteria object containing the columns to add.
     * @param string   $alias    optional table alias
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function addSelectColumns(Criteria $criteria, $alias = null)
    {
        if (null === $alias) {
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–û–î_–ü–†–û–ï–ö–¢–ê);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–†–û–ï–ö–¢);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ó–ê–ö–ê–ó–ß–ò–ö);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–û–î–†–Ø–î–ß–ò–ö–ò);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ü–ï–†–ò–û–î_–í–´–ü–û–õ–ù–ï–ù–ò–Ø_–†–ê–ë–û–¢);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–î–ï–¢–ê–õ–ò_–ü–†–û–ï–ö–¢–ê);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–¢–ò–ü_–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ù–ê–ó–í–ê–ù–ò–ï_–ü–ê–ü–ö–ò_–ü–†–û–ï–ö–¢–ê);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–ê–†–¢–ò–ù–ö–ê);
            $criteria->addSelectColumn(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_–ö–ê–†–¢–û–ß–ö–ê_–ü–†–û–ï–ö–¢–ê);
        } else {
            $criteria->addSelectColumn($alias . '.id');
            $criteria->addSelectColumn($alias . '.–ö–æ–¥_–ø—Ä–æ–µ–∫—Ç–∞');
            $criteria->addSelectColumn($alias . '.–ü—Ä–æ–µ–∫—Ç');
            $criteria->addSelectColumn($alias . '.–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å');
            $criteria->addSelectColumn($alias . '.–ó–∞–∫–∞–∑—á–∏–∫');
            $criteria->addSelectColumn($alias . '.–ü–æ–¥—Ä—è–¥—á–∏–∫–∏');
            $criteria->addSelectColumn($alias . '.–ü–µ—Ä–∏–æ–¥_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è_—Ä–∞–±–æ—Ç');
            $criteria->addSelectColumn($alias . '.–î–µ—Ç–∞–ª–∏_–ø—Ä–æ–µ–∫—Ç–∞');
            $criteria->addSelectColumn($alias . '.–¢–∏–ø_—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞');
            $criteria->addSelectColumn($alias . '.–ù–∞–∑–≤–∞–Ω–∏–µ_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞');
            $criteria->addSelectColumn($alias . '.–ö–∞—Ä—Ç–∏–Ω–∫–∞');
            $criteria->addSelectColumn($alias . '.–ö–∞—Ä—Ç–æ—á–∫–∞_–ø—Ä–æ–µ–∫—Ç–∞');
        }
    }

    /**
     * Returns the TableMap related to this object.
     * This method is not needed for general use but a specific application could have a need.
     * @return TableMap
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function getTableMap()
    {
        return Propel::getServiceContainer()->getDatabaseMap(–ü—Ä–æ–µ–∫—Ç—ãTableMap::DATABASE_NAME)->getTable(–ü—Ä–æ–µ–∫—Ç—ãTableMap::TABLE_NAME);
    }

    /**
     * Add a TableMap instance to the database for this tableMap class.
     */
    public static function buildTableMap()
    {
        $dbMap = Propel::getServiceContainer()->getDatabaseMap(–ü—Ä–æ–µ–∫—Ç—ãTableMap::DATABASE_NAME);
        if (!$dbMap->hasTable(–ü—Ä–æ–µ–∫—Ç—ãTableMap::TABLE_NAME)) {
            $dbMap->addTableObject(new –ü—Ä–æ–µ–∫—Ç—ãTableMap());
        }
    }

    /**
     * Performs a DELETE on the database, given a –ü—Ä–æ–µ–∫—Ç—ã or Criteria object OR a primary key value.
     *
     * @param mixed               $values Criteria or –ü—Ä–æ–µ–∫—Ç—ã object or primary key or array of primary keys
     *              which is used to create the DELETE statement
     * @param  ConnectionInterface $con the connection to use
     * @return int             The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
     *                         if supported by native driver or if emulated using Propel.
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
     public static function doDelete($values, ConnectionInterface $con = null)
     {
        if (null === $con) {
            $con = Propel::getServiceContainer()->getWriteConnection(–ü—Ä–æ–µ–∫—Ç—ãTableMap::DATABASE_NAME);
        }

        if ($values instanceof Criteria) {
            // rename for clarity
            $criteria = $values;
        } elseif ($values instanceof \–ü—Ä–æ–µ–∫—Ç—ã) { // it's a model object
            // create criteria based on pk values
            $criteria = $values->buildPkeyCriteria();
        } else { // it's a primary key, or an array of pks
            $criteria = new Criteria(–ü—Ä–æ–µ–∫—Ç—ãTableMap::DATABASE_NAME);
            $criteria->add(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID, (array) $values, Criteria::IN);
        }

        $query = –ü—Ä–æ–µ–∫—Ç—ãQuery::create()->mergeWith($criteria);

        if ($values instanceof Criteria) {
            –ü—Ä–æ–µ–∫—Ç—ãTableMap::clearInstancePool();
        } elseif (!is_object($values)) { // it's a primary key, or an array of pks
            foreach ((array) $values as $singleval) {
                –ü—Ä–æ–µ–∫—Ç—ãTableMap::removeInstanceFromPool($singleval);
            }
        }

        return $query->delete($con);
    }

    /**
     * Deletes all rows from the –ü—Ä–æ–µ–∫—Ç—ã table.
     *
     * @param ConnectionInterface $con the connection to use
     * @return int The number of affected rows (if supported by underlying database driver).
     */
    public static function doDeleteAll(ConnectionInterface $con = null)
    {
        return –ü—Ä–æ–µ–∫—Ç—ãQuery::create()->doDeleteAll($con);
    }

    /**
     * Performs an INSERT on the database, given a –ü—Ä–æ–µ–∫—Ç—ã or Criteria object.
     *
     * @param mixed               $criteria Criteria or –ü—Ä–æ–µ–∫—Ç—ã object containing data that is used to create the INSERT statement.
     * @param ConnectionInterface $con the ConnectionInterface connection to use
     * @return mixed           The new primary key.
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function doInsert($criteria, ConnectionInterface $con = null)
    {
        if (null === $con) {
            $con = Propel::getServiceContainer()->getWriteConnection(–ü—Ä–æ–µ–∫—Ç—ãTableMap::DATABASE_NAME);
        }

        if ($criteria instanceof Criteria) {
            $criteria = clone $criteria; // rename for clarity
        } else {
            $criteria = $criteria->buildCriteria(); // build Criteria from –ü—Ä–æ–µ–∫—Ç—ã object
        }

        if ($criteria->containsKey(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID) && $criteria->keyContainsValue(–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID) ) {
            throw new PropelException('Cannot insert a value for auto-increment primary key ('.–ü—Ä–æ–µ–∫—Ç—ãTableMap::COL_ID.')');
        }


        // Set the correct dbName
        $query = –ü—Ä–æ–µ–∫—Ç—ãQuery::create()->mergeWith($criteria);

        // use transaction because $criteria could contain info
        // for more than one table (I guess, conceivably)
        return $con->transaction(function () use ($con, $query) {
            return $query->doInsert($con);
        });
    }

} // –ü—Ä–æ–µ–∫—Ç—ãTableMap
// This is the static code needed to register the TableMap for this table with the main Propel class.
//
–ü—Ä–æ–µ–∫—Ç—ãTableMap::buildTableMap();
