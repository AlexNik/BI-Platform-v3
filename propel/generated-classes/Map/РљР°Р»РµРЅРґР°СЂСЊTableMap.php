<?php

namespace Map;

use \–ö–∞–ª–µ–Ω–¥–∞—Ä—å;
use \–ö–∞–ª–µ–Ω–¥–∞—Ä—åQuery;
use Propel\Runtime\Propel;
use Propel\Runtime\ActiveQuery\Criteria;
use Propel\Runtime\ActiveQuery\InstancePoolTrait;
use Propel\Runtime\Connection\ConnectionInterface;
use Propel\Runtime\DataFetcher\DataFetcherInterface;
use Propel\Runtime\Exception\PropelException;
use Propel\Runtime\Map\RelationMap;
use Propel\Runtime\Map\TableMap;
use Propel\Runtime\Map\TableMapTrait;


/**
 * This class defines the structure of the '–ö–∞–ª–µ–Ω–¥–∞—Ä—å' table.
 *
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 */
class –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap extends TableMap
{
    use InstancePoolTrait;
    use TableMapTrait;

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = '.Map.–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap';

    /**
     * The default database name for this class
     */
    const DATABASE_NAME = 'default';

    /**
     * The table name for this class
     */
    const TABLE_NAME = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å';

    /**
     * The related Propel class for this table
     */
    const OM_CLASS = '\\–ö–∞–ª–µ–Ω–¥–∞—Ä—å';

    /**
     * A class that can be returned by this tableMap
     */
    const CLASS_DEFAULT = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å';

    /**
     * The total number of columns
     */
    const NUM_COLUMNS = 10;

    /**
     * The number of lazy-loaded columns
     */
    const NUM_LAZY_LOAD_COLUMNS = 0;

    /**
     * The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS)
     */
    const NUM_HYDRATE_COLUMNS = 10;

    /**
     * the column name for the –î–∞—Ç–∞ field
     */
    const COL_–î–ê–¢–ê = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–î–∞—Ç–∞';

    /**
     * the column name for the –ì–æ–¥ field
     */
    const COL_–ì–û–î = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–ì–æ–¥';

    /**
     * the column name for the –ü–æ–ª—É–≥–æ–¥–∏–µ field
     */
    const COL_–ü–û–õ–£–ì–û–î–ò–ï = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–ü–æ–ª—É–≥–æ–¥–∏–µ';

    /**
     * the column name for the –ö–≤–∞—Ä—Ç–∞–ª field
     */
    const COL_–ö–í–ê–†–¢–ê–õ = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–ö–≤–∞—Ä—Ç–∞–ª';

    /**
     * the column name for the –ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞ field
     */
    const COL_–ù–û–ú–ï–†_–ú–ï–°–Ø–¶–ê = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞';

    /**
     * the column name for the –ú–µ—Å—è—Ü field
     */
    const COL_–ú–ï–°–Ø–¶ = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–ú–µ—Å—è—Ü';

    /**
     * the column name for the –î–µ–Ω—å field
     */
    const COL_–î–ï–ù–¨ = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–î–µ–Ω—å';

    /**
     * the column name for the –ù–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏ field
     */
    const COL_–ù–û–ú–ï–†_–ù–ï–î–ï–õ–ò = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–ù–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏';

    /**
     * the column name for the –î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏ field
     */
    const COL_–î–ï–ù–¨_–ù–ï–î–ï–õ–ò = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏';

    /**
     * the column name for the –î–µ–Ω—å_–≤_–≥–æ–¥—É field
     */
    const COL_–î–ï–ù–¨_–í_–ì–û–î–£ = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.–î–µ–Ω—å_–≤_–≥–æ–¥—É';

    /**
     * The default string format for model objects of the related table
     */
    const DEFAULT_STRING_FORMAT = 'YAML';

    /**
     * holds an array of fieldnames
     *
     * first dimension keys are the type constants
     * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
     */
    protected static $fieldNames = array (
        self::TYPE_PHPNAME       => array('–¥–∞—Ç–∞', '–≥–æ–¥', '–ø–æ–ª—É–≥–æ–¥–∏–µ', '–∫–≤–∞—Ä—Ç–∞–ª', '–Ω–æ–º–µ—Ä–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü', '–¥–µ–Ω—å', '–Ω–æ–º–µ—Ä–Ω–µ–¥–µ–ª–∏', '–¥–µ–Ω—å–Ω–µ–¥–µ–ª–∏', '–¥–µ–Ω—å–≤–≥–æ–¥—É', ),
        self::TYPE_CAMELNAME     => array('¥–∞—Ç–∞', '≥–æ–¥', 'ø–æ–ª—É–≥–æ–¥–∏–µ', '∫–≤–∞—Ä—Ç–∞–ª', 'Ω–æ–º–µ—Ä–º–µ—Å—è—Ü–∞', 'º–µ—Å—è—Ü', '¥–µ–Ω—å', 'Ω–æ–º–µ—Ä–Ω–µ–¥–µ–ª–∏', '¥–µ–Ω—å–Ω–µ–¥–µ–ª–∏', '¥–µ–Ω—å–≤–≥–æ–¥—É', ),
        self::TYPE_COLNAME       => array(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ê–¢–ê, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ì–û–î, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ü–û–õ–£–ì–û–î–ò–ï, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ö–í–ê–†–¢–ê–õ, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ù–û–ú–ï–†_–ú–ï–°–Ø–¶–ê, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ú–ï–°–Ø–¶, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ù–û–ú–ï–†_–ù–ï–î–ï–õ–ò, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨_–ù–ï–î–ï–õ–ò, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨_–í_–ì–û–î–£, ),
        self::TYPE_FIELDNAME     => array('–î–∞—Ç–∞', '–ì–æ–¥', '–ü–æ–ª—É–≥–æ–¥–∏–µ', '–ö–≤–∞—Ä—Ç–∞–ª', '–ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞', '–ú–µ—Å—è—Ü', '–î–µ–Ω—å', '–ù–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏', '–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏', '–î–µ–Ω—å_–≤_–≥–æ–¥—É', ),
        self::TYPE_NUM           => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, )
    );

    /**
     * holds an array of keys for quick access to the fieldnames array
     *
     * first dimension keys are the type constants
     * e.g. self::$fieldKeys[self::TYPE_PHPNAME]['Id'] = 0
     */
    protected static $fieldKeys = array (
        self::TYPE_PHPNAME       => array('–¥–∞—Ç–∞' => 0, '–≥–æ–¥' => 1, '–ø–æ–ª—É–≥–æ–¥–∏–µ' => 2, '–∫–≤–∞—Ä—Ç–∞–ª' => 3, '–Ω–æ–º–µ—Ä–º–µ—Å—è—Ü–∞' => 4, '–º–µ—Å—è—Ü' => 5, '–¥–µ–Ω—å' => 6, '–Ω–æ–º–µ—Ä–Ω–µ–¥–µ–ª–∏' => 7, '–¥–µ–Ω—å–Ω–µ–¥–µ–ª–∏' => 8, '–¥–µ–Ω—å–≤–≥–æ–¥—É' => 9, ),
        self::TYPE_CAMELNAME     => array('¥–∞—Ç–∞' => 0, '≥–æ–¥' => 1, 'ø–æ–ª—É–≥–æ–¥–∏–µ' => 2, '∫–≤–∞—Ä—Ç–∞–ª' => 3, 'Ω–æ–º–µ—Ä–º–µ—Å—è—Ü–∞' => 4, 'º–µ—Å—è—Ü' => 5, '¥–µ–Ω—å' => 6, 'Ω–æ–º–µ—Ä–Ω–µ–¥–µ–ª–∏' => 7, '¥–µ–Ω—å–Ω–µ–¥–µ–ª–∏' => 8, '¥–µ–Ω—å–≤–≥–æ–¥—É' => 9, ),
        self::TYPE_COLNAME       => array(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ê–¢–ê => 0, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ì–û–î => 1, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ü–û–õ–£–ì–û–î–ò–ï => 2, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ö–í–ê–†–¢–ê–õ => 3, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ù–û–ú–ï–†_–ú–ï–°–Ø–¶–ê => 4, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ú–ï–°–Ø–¶ => 5, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨ => 6, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ù–û–ú–ï–†_–ù–ï–î–ï–õ–ò => 7, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨_–ù–ï–î–ï–õ–ò => 8, –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨_–í_–ì–û–î–£ => 9, ),
        self::TYPE_FIELDNAME     => array('–î–∞—Ç–∞' => 0, '–ì–æ–¥' => 1, '–ü–æ–ª—É–≥–æ–¥–∏–µ' => 2, '–ö–≤–∞—Ä—Ç–∞–ª' => 3, '–ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞' => 4, '–ú–µ—Å—è—Ü' => 5, '–î–µ–Ω—å' => 6, '–ù–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏' => 7, '–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏' => 8, '–î–µ–Ω—å_–≤_–≥–æ–¥—É' => 9, ),
        self::TYPE_NUM           => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, )
    );

    /**
     * Initialize the table attributes and columns
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('–ö–∞–ª–µ–Ω–¥–∞—Ä—å');
        $this->setPhpName('–ö–∞–ª–µ–Ω–¥–∞—Ä—å');
        $this->setIdentifierQuoting(false);
        $this->setClassName('\\–ö–∞–ª–µ–Ω–¥–∞—Ä—å');
        $this->setPackage('');
        $this->setUseIdGenerator(false);
        // columns
        $this->addPrimaryKey('–î–∞—Ç–∞', '–¥–∞—Ç–∞', 'DATE', true, null, null);
        $this->addForeignKey('–ì–æ–¥', '–≥–æ–¥', 'SMALLINT', '–ì–æ–¥–∞', 'id', false, null, null);
        $this->addColumn('–ü–æ–ª—É–≥–æ–¥–∏–µ', '–ø–æ–ª—É–≥–æ–¥–∏–µ', 'SMALLINT', false, null, null);
        $this->addColumn('–ö–≤–∞—Ä—Ç–∞–ª', '–∫–≤–∞—Ä—Ç–∞–ª', 'SMALLINT', false, null, null);
        $this->addForeignKey('–ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞', '–Ω–æ–º–µ—Ä–º–µ—Å—è—Ü–∞', 'SMALLINT', '–ú–µ—Å—è—Ü–∞', 'id', false, null, null);
        $this->addColumn('–ú–µ—Å—è—Ü', '–º–µ—Å—è—Ü', 'LONGVARCHAR', false, null, null);
        $this->addColumn('–î–µ–Ω—å', '–¥–µ–Ω—å', 'SMALLINT', false, null, null);
        $this->addColumn('–ù–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏', '–Ω–æ–º–µ—Ä–Ω–µ–¥–µ–ª–∏', 'SMALLINT', false, null, null);
        $this->addForeignKey('–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏', '–¥–µ–Ω—å–Ω–µ–¥–µ–ª–∏', 'SMALLINT', '–î–Ω–∏_–Ω–µ–¥–µ–ª–∏', 'id', false, null, null);
        $this->addColumn('–î–µ–Ω—å_–≤_–≥–æ–¥—É', '–¥–µ–Ω—å–≤–≥–æ–¥—É', 'SMALLINT', false, null, null);
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('–≥–æ–¥–∞', '\\–≥–æ–¥–∞', RelationMap::MANY_TO_ONE, array (
  0 =>
  array (
    0 => ':–ì–æ–¥',
    1 => ':id',
  ),
), null, null, null, false);
        $this->addRelation('–¥–Ω–∏–Ω–µ–¥–µ–ª–∏', '\\–¥–Ω–∏–Ω–µ–¥–µ–ª–∏', RelationMap::MANY_TO_ONE, array (
  0 =>
  array (
    0 => ':–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏',
    1 => ':id',
  ),
), null, null, null, false);
        $this->addRelation('–º–µ—Å—è—Ü–∞', '\\–º–µ—Å—è—Ü–∞', RelationMap::MANY_TO_ONE, array (
  0 =>
  array (
    0 => ':–ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞',
    1 => ':id',
  ),
), null, null, null, false);
        $this->addRelation('–≤—ã—Ä–∞–±–æ—Ç–∫–∞', '\\–≤—ã—Ä–∞–±–æ—Ç–∫–∞', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–≤—ã—Ä–∞–±–æ—Ç–∫–∞s', false);
        $this->addRelation('–¥–∞—Ç—ã–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π–¥–∞—à–±–æ—Ä–¥–æ–≤', '\\–¥–∞—Ç—ã–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π–¥–∞—à–±–æ—Ä–¥–æ–≤', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–¥–∞—Ç—ã–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π–¥–∞—à–±–æ—Ä–¥–æ–≤s', false);
        $this->addRelation('–º—Ç—Ä', '\\–º—Ç—Ä', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–º—Ç—Äs', false);
        $this->addRelation('–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è', '\\–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞_–æ—Ç—á—ë—Ç–∞',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—ès', false);
        $this->addRelation('–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º', '\\–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞_–æ—Ç—á—ë—Ç–∞',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºs', false);
        $this->addRelation('–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—èRelatedBy–¥–∞—Ç–∞–≤—ã–¥–∞—á–∏', '\\–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞_–≤—ã–¥–∞—á–∏',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—èsRelatedBy–¥–∞—Ç–∞–≤—ã–¥–∞—á–∏', false);
        $this->addRelation('–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—èRelatedBy–ø–ª–∞–Ω–æ–≤–∞—è–¥–∞—Ç–∞—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è', '\\–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–ü–ª–∞–Ω–æ–≤–∞—è_–¥–∞—Ç–∞_—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—èsRelatedBy–ø–ª–∞–Ω–æ–≤–∞—è–¥–∞—Ç–∞—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è', false);
        $this->addRelation('–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—èRelatedBy—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è–¥–∞—Ç–∞—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è', '\\–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è_–¥–∞—Ç–∞_—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '–ü—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—èsRelatedBy—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è–¥–∞—Ç–∞—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è', false);
        $this->addRelation('—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ–æ–±—ä—ë–º—ã', '\\—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ–æ–±—ä—ë–º—ã', RelationMap::ONE_TO_MANY, array (
  0 =>
  array (
    0 => ':–î–∞—Ç–∞',
    1 => ':–î–∞—Ç–∞',
  ),
), null, null, '—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ–æ–±—ä—ë–º—ãs', false);
    } // buildRelations()

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param array  $row       resultset row.
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM
     *
     * @return string The primary key hash of the row
     */
    public static function getPrimaryKeyHashFromRow($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        // If the PK cannot be derived from the row, return NULL.
        if ($row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)] === null) {
            return null;
        }

        return null === $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)] || is_scalar($row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)]) || is_callable([$row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)], '__toString']) ? (string) $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)] : $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)];
    }

    /**
     * Retrieves the primary key from the DB resultset row
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, an array of the primary key columns will be returned.
     *
     * @param array  $row       resultset row.
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM
     *
     * @return mixed The primary key of the row
     */
    public static function getPrimaryKeyFromRow($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        return (string) $row[
            $indexType == TableMap::TYPE_NUM
                ? 0 + $offset
                : self::translateFieldName('–¥–∞—Ç–∞', TableMap::TYPE_PHPNAME, $indexType)
        ];
    }
    
    /**
     * The class that the tableMap will make instances of.
     *
     * If $withPrefix is true, the returned path
     * uses a dot-path notation which is translated into a path
     * relative to a location on the PHP include_path.
     * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
     *
     * @param boolean $withPrefix Whether or not to return the path with the class name
     * @return string path.to.ClassName
     */
    public static function getOMClass($withPrefix = true)
    {
        return $withPrefix ? –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::CLASS_DEFAULT : –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::OM_CLASS;
    }

    /**
     * Populates an object of the default type or an object that inherit from the default.
     *
     * @param array  $row       row returned by DataFetcher->fetch().
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType The index type of $row. Mostly DataFetcher->getIndexType().
                                 One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM.
     *
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     * @return array           (–ö–∞–ª–µ–Ω–¥–∞—Ä—å object, last column rank)
     */
    public static function populateObject($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        $key = –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::getPrimaryKeyHashFromRow($row, $offset, $indexType);
        if (null !== ($obj = –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::getInstanceFromPool($key))) {
            // We no longer rehydrate the object, since this can cause data loss.
            // See http://www.propelorm.org/ticket/509
            // $obj->hydrate($row, $offset, true); // rehydrate
            $col = $offset + –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::NUM_HYDRATE_COLUMNS;
        } else {
            $cls = –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::OM_CLASS;
            /** @var –ö–∞–ª–µ–Ω–¥–∞—Ä—å $obj */
            $obj = new $cls();
            $col = $obj->hydrate($row, $offset, false, $indexType);
            –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::addInstanceToPool($obj, $key);
        }

        return array($obj, $col);
    }

    /**
     * The returned array will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @param DataFetcherInterface $dataFetcher
     * @return array
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function populateObjects(DataFetcherInterface $dataFetcher)
    {
        $results = array();
    
        // set the class once to avoid overhead in the loop
        $cls = static::getOMClass(false);
        // populate the object(s)
        while ($row = $dataFetcher->fetch()) {
            $key = –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::getPrimaryKeyHashFromRow($row, 0, $dataFetcher->getIndexType());
            if (null !== ($obj = –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::getInstanceFromPool($key))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj->hydrate($row, 0, true); // rehydrate
                $results[] = $obj;
            } else {
                /** @var –ö–∞–ª–µ–Ω–¥–∞—Ä—å $obj */
                $obj = new $cls();
                $obj->hydrate($row);
                $results[] = $obj;
                –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::addInstanceToPool($obj, $key);
            } // if key exists
        }

        return $results;
    }
    /**
     * Add all the columns needed to create a new object.
     *
     * Note: any columns that were marked with lazyLoad="true" in the
     * XML schema will not be added to the select list and only loaded
     * on demand.
     *
     * @param Criteria $criteria object containing the columns to add.
     * @param string   $alias    optional table alias
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function addSelectColumns(Criteria $criteria, $alias = null)
    {
        if (null === $alias) {
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ê–¢–ê);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ì–û–î);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ü–û–õ–£–ì–û–î–ò–ï);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ö–í–ê–†–¢–ê–õ);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ù–û–ú–ï–†_–ú–ï–°–Ø–¶–ê);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ú–ï–°–Ø–¶);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–ù–û–ú–ï–†_–ù–ï–î–ï–õ–ò);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨_–ù–ï–î–ï–õ–ò);
            $criteria->addSelectColumn(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ï–ù–¨_–í_–ì–û–î–£);
        } else {
            $criteria->addSelectColumn($alias . '.–î–∞—Ç–∞');
            $criteria->addSelectColumn($alias . '.–ì–æ–¥');
            $criteria->addSelectColumn($alias . '.–ü–æ–ª—É–≥–æ–¥–∏–µ');
            $criteria->addSelectColumn($alias . '.–ö–≤–∞—Ä—Ç–∞–ª');
            $criteria->addSelectColumn($alias . '.–ù–æ–º–µ—Ä_–º–µ—Å—è—Ü–∞');
            $criteria->addSelectColumn($alias . '.–ú–µ—Å—è—Ü');
            $criteria->addSelectColumn($alias . '.–î–µ–Ω—å');
            $criteria->addSelectColumn($alias . '.–ù–æ–º–µ—Ä_–Ω–µ–¥–µ–ª–∏');
            $criteria->addSelectColumn($alias . '.–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏');
            $criteria->addSelectColumn($alias . '.–î–µ–Ω—å_–≤_–≥–æ–¥—É');
        }
    }

    /**
     * Returns the TableMap related to this object.
     * This method is not needed for general use but a specific application could have a need.
     * @return TableMap
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function getTableMap()
    {
        return Propel::getServiceContainer()->getDatabaseMap(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::DATABASE_NAME)->getTable(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::TABLE_NAME);
    }

    /**
     * Add a TableMap instance to the database for this tableMap class.
     */
    public static function buildTableMap()
    {
        $dbMap = Propel::getServiceContainer()->getDatabaseMap(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::DATABASE_NAME);
        if (!$dbMap->hasTable(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::TABLE_NAME)) {
            $dbMap->addTableObject(new –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap());
        }
    }

    /**
     * Performs a DELETE on the database, given a –ö–∞–ª–µ–Ω–¥–∞—Ä—å or Criteria object OR a primary key value.
     *
     * @param mixed               $values Criteria or –ö–∞–ª–µ–Ω–¥–∞—Ä—å object or primary key or array of primary keys
     *              which is used to create the DELETE statement
     * @param  ConnectionInterface $con the connection to use
     * @return int             The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
     *                         if supported by native driver or if emulated using Propel.
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
     public static function doDelete($values, ConnectionInterface $con = null)
     {
        if (null === $con) {
            $con = Propel::getServiceContainer()->getWriteConnection(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::DATABASE_NAME);
        }

        if ($values instanceof Criteria) {
            // rename for clarity
            $criteria = $values;
        } elseif ($values instanceof \–ö–∞–ª–µ–Ω–¥–∞—Ä—å) { // it's a model object
            // create criteria based on pk values
            $criteria = $values->buildPkeyCriteria();
        } else { // it's a primary key, or an array of pks
            $criteria = new Criteria(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::DATABASE_NAME);
            $criteria->add(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::COL_–î–ê–¢–ê, (array) $values, Criteria::IN);
        }

        $query = –ö–∞–ª–µ–Ω–¥–∞—Ä—åQuery::create()->mergeWith($criteria);

        if ($values instanceof Criteria) {
            –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::clearInstancePool();
        } elseif (!is_object($values)) { // it's a primary key, or an array of pks
            foreach ((array) $values as $singleval) {
                –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::removeInstanceFromPool($singleval);
            }
        }

        return $query->delete($con);
    }

    /**
     * Deletes all rows from the –ö–∞–ª–µ–Ω–¥–∞—Ä—å table.
     *
     * @param ConnectionInterface $con the connection to use
     * @return int The number of affected rows (if supported by underlying database driver).
     */
    public static function doDeleteAll(ConnectionInterface $con = null)
    {
        return –ö–∞–ª–µ–Ω–¥–∞—Ä—åQuery::create()->doDeleteAll($con);
    }

    /**
     * Performs an INSERT on the database, given a –ö–∞–ª–µ–Ω–¥–∞—Ä—å or Criteria object.
     *
     * @param mixed               $criteria Criteria or –ö–∞–ª–µ–Ω–¥–∞—Ä—å object containing data that is used to create the INSERT statement.
     * @param ConnectionInterface $con the ConnectionInterface connection to use
     * @return mixed           The new primary key.
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function doInsert($criteria, ConnectionInterface $con = null)
    {
        if (null === $con) {
            $con = Propel::getServiceContainer()->getWriteConnection(–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::DATABASE_NAME);
        }

        if ($criteria instanceof Criteria) {
            $criteria = clone $criteria; // rename for clarity
        } else {
            $criteria = $criteria->buildCriteria(); // build Criteria from –ö–∞–ª–µ–Ω–¥–∞—Ä—å object
        }


        // Set the correct dbName
        $query = –ö–∞–ª–µ–Ω–¥–∞—Ä—åQuery::create()->mergeWith($criteria);

        // use transaction because $criteria could contain info
        // for more than one table (I guess, conceivably)
        return $con->transaction(function () use ($con, $query) {
            return $query->doInsert($con);
        });
    }

} // –ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap
// This is the static code needed to register the TableMap for this table with the main Propel class.
//
–ö–∞–ª–µ–Ω–¥–∞—Ä—åTableMap::buildTableMap();
