<?php

namespace Map;

use \–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º;
use \–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºQuery;
use Propel\Runtime\Propel;
use Propel\Runtime\ActiveQuery\Criteria;
use Propel\Runtime\ActiveQuery\InstancePoolTrait;
use Propel\Runtime\Connection\ConnectionInterface;
use Propel\Runtime\DataFetcher\DataFetcherInterface;
use Propel\Runtime\Exception\LogicException;
use Propel\Runtime\Exception\PropelException;
use Propel\Runtime\Map\RelationMap;
use Propel\Runtime\Map\TableMap;
use Propel\Runtime\Map\TableMapTrait;


/**
 * This class defines the structure of the '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º' table.
 *
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 */
class –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap extends TableMap
{
    use InstancePoolTrait;
    use TableMapTrait;

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = '.Map.–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap';

    /**
     * The default database name for this class
     */
    const DATABASE_NAME = 'default';

    /**
     * The table name for this class
     */
    const TABLE_NAME = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º';

    /**
     * The related Propel class for this table
     */
    const OM_CLASS = '\\–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º';

    /**
     * A class that can be returned by this tableMap
     */
    const CLASS_DEFAULT = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º';

    /**
     * The total number of columns
     */
    const NUM_COLUMNS = 11;

    /**
     * The number of lazy-loaded columns
     */
    const NUM_LAZY_LOAD_COLUMNS = 0;

    /**
     * The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS)
     */
    const NUM_HYDRATE_COLUMNS = 11;

    /**
     * the column name for the id field
     */
    const COL_ID = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.id';

    /**
     * the column name for the –¢–∏–ø–¢–µ—Ö–Ω–∏–∫–∏ field
     */
    const COL_–¢–ò–ü–¢–ï–•–ù–ò–ö–ò = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–¢–∏–ø–¢–µ—Ö–Ω–∏–∫–∏';

    /**
     * the column name for the –ü–ª–∞–û–æ—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ field
     */
    const COL_–ü–õ–ê–û–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–ü–ª–∞–û–æ—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ';

    /**
     * the column name for the –§–∞–∫—Ç–û—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ field
     */
    const COL_–§–ê–ö–¢–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–§–∞–∫—Ç–û—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ';

    /**
     * the column name for the –ü–ª–∞–Ω–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ field
     */
    const COL_–ü–õ–ê–ù–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–ü–ª–∞–Ω–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ';

    /**
     * the column name for the –§–∞–∫—Ç–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ field
     */
    const COL_–§–ê–ö–¢–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–§–∞–∫—Ç–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ';

    /**
     * the column name for the –ü—Ä–æ–µ–∫—Ç field
     */
    const COL_–ü–†–û–ï–ö–¢ = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–ü—Ä–æ–µ–∫—Ç';

    /**
     * the column name for the –ì–æ–¥ field
     */
    const COL_–ì–û–î = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–ì–æ–¥';

    /**
     * the column name for the –ú–µ—Å—è—Ü field
     */
    const COL_–ú–ï–°–Ø–¶ = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–ú–µ—Å—è—Ü';

    /**
     * the column name for the –î–∞—Ç–∞–û—Ç—á—ë—Ç–∞ field
     */
    const COL_–î–ê–¢–ê–û–¢–ß–Å–¢–ê = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–î–∞—Ç–∞–û—Ç—á—ë—Ç–∞';

    /**
     * the column name for the –£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç field
     */
    const COL_–£–ß–ê–°–¢–û–ö–†–ê–ë–û–¢ = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º.–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç';

    /**
     * The default string format for model objects of the related table
     */
    const DEFAULT_STRING_FORMAT = 'YAML';

    /**
     * holds an array of fieldnames
     *
     * first dimension keys are the type constants
     * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
     */
    protected static $fieldNames = array (
        self::TYPE_PHPNAME       => array('Id', '–¢–∏–ø—Ç–µ—Ö–Ω–∏–∫–∏', '–ü–ª–∞–æ–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–§–∞–∫—Ç–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü–ª–∞–Ω–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–§–∞–∫—Ç–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ–µ–∫—Ç', '–ì–æ–¥', '–ú–µ—Å—è—Ü', '–î–∞—Ç–∞–æ—Ç—á—ë—Ç–∞', '–£—á–∞—Å—Ç–æ–∫—Ä–∞–±–æ—Ç', ),
        self::TYPE_CAMELNAME     => array('id', '¢–∏–ø—Ç–µ—Ö–Ω–∏–∫–∏', 'ü–ª–∞–æ–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '§–∞–∫—Ç–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'ü–ª–∞–Ω–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '§–∞–∫—Ç–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'ü—Ä–æ–µ–∫—Ç', 'ì–æ–¥', 'ú–µ—Å—è—Ü', 'î–∞—Ç–∞–æ—Ç—á—ë—Ç–∞', '£—á–∞—Å—Ç–æ–∫—Ä–∞–±–æ—Ç', ),
        self::TYPE_COLNAME       => array(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_ID, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–¢–ò–ü–¢–ï–•–ù–ò–ö–ò, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–õ–ê–û–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–§–ê–ö–¢–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–õ–ê–ù–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–§–ê–ö–¢–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–†–û–ï–ö–¢, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ì–û–î, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ú–ï–°–Ø–¶, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–î–ê–¢–ê–û–¢–ß–Å–¢–ê, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–£–ß–ê–°–¢–û–ö–†–ê–ë–û–¢, ),
        self::TYPE_FIELDNAME     => array('id', '–¢–∏–ø–¢–µ—Ö–Ω–∏–∫–∏', '–ü–ª–∞–û–æ—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–§–∞–∫—Ç–û—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü–ª–∞–Ω–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–§–∞–∫—Ç–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ–µ–∫—Ç', '–ì–æ–¥', '–ú–µ—Å—è—Ü', '–î–∞—Ç–∞–û—Ç—á—ë—Ç–∞', '–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç', ),
        self::TYPE_NUM           => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, )
    );

    /**
     * holds an array of keys for quick access to the fieldnames array
     *
     * first dimension keys are the type constants
     * e.g. self::$fieldKeys[self::TYPE_PHPNAME]['Id'] = 0
     */
    protected static $fieldKeys = array (
        self::TYPE_PHPNAME       => array('Id' => 0, '–¢–∏–ø—Ç–µ—Ö–Ω–∏–∫–∏' => 1, '–ü–ª–∞–æ–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 2, '–§–∞–∫—Ç–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 3, '–ü–ª–∞–Ω–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 4, '–§–∞–∫—Ç–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 5, '–ü—Ä–æ–µ–∫—Ç' => 6, '–ì–æ–¥' => 7, '–ú–µ—Å—è—Ü' => 8, '–î–∞—Ç–∞–æ—Ç—á—ë—Ç–∞' => 9, '–£—á–∞—Å—Ç–æ–∫—Ä–∞–±–æ—Ç' => 10, ),
        self::TYPE_CAMELNAME     => array('id' => 0, '¢–∏–ø—Ç–µ—Ö–Ω–∏–∫–∏' => 1, 'ü–ª–∞–æ–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 2, '§–∞–∫—Ç–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 3, 'ü–ª–∞–Ω–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 4, '§–∞–∫—Ç–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 5, 'ü—Ä–æ–µ–∫—Ç' => 6, 'ì–æ–¥' => 7, 'ú–µ—Å—è—Ü' => 8, 'î–∞—Ç–∞–æ—Ç—á—ë—Ç–∞' => 9, '£—á–∞—Å—Ç–æ–∫—Ä–∞–±–æ—Ç' => 10, ),
        self::TYPE_COLNAME       => array(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_ID => 0, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–¢–ò–ü–¢–ï–•–ù–ò–ö–ò => 1, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–õ–ê–û–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û => 2, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–§–ê–ö–¢–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û => 3, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–õ–ê–ù–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û => 4, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–§–ê–ö–¢–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û => 5, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–†–û–ï–ö–¢ => 6, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ì–û–î => 7, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ú–ï–°–Ø–¶ => 8, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–î–ê–¢–ê–û–¢–ß–Å–¢–ê => 9, –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–£–ß–ê–°–¢–û–ö–†–ê–ë–û–¢ => 10, ),
        self::TYPE_FIELDNAME     => array('id' => 0, '–¢–∏–ø–¢–µ—Ö–Ω–∏–∫–∏' => 1, '–ü–ª–∞–û–æ—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 2, '–§–∞–∫—Ç–û—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 3, '–ü–ª–∞–Ω–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 4, '–§–∞–∫—Ç–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' => 5, '–ü—Ä–æ–µ–∫—Ç' => 6, '–ì–æ–¥' => 7, '–ú–µ—Å—è—Ü' => 8, '–î–∞—Ç–∞–û—Ç—á—ë—Ç–∞' => 9, '–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç' => 10, ),
        self::TYPE_NUM           => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, )
    );

    /**
     * Initialize the table attributes and columns
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º');
        $this->setPhpName('–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º');
        $this->setIdentifierQuoting(false);
        $this->setClassName('\\–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º');
        $this->setPackage('');
        $this->setUseIdGenerator(true);
        // columns
        $this->addColumn('id', 'Id', 'INTEGER', true, null, null);
        $this->addColumn('–¢–∏–ø–¢–µ—Ö–Ω–∏–∫–∏', '–¢–∏–ø—Ç–µ—Ö–Ω–∏–∫–∏', 'INTEGER', true, null, null);
        $this->addColumn('–ü–ª–∞–û–æ—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü–ª–∞–æ–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'INTEGER', false, null, null);
        $this->addColumn('–§–∞–∫—Ç–û—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–§–∞–∫—Ç–æ—Ç–≥—Ä—É–∑–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'INTEGER', false, null, null);
        $this->addColumn('–ü–ª–∞–Ω–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü–ª–∞–Ω–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'INTEGER', false, null, null);
        $this->addColumn('–§–∞–∫—Ç–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–§–∞–∫—Ç–¥–æ—Å—Ç–∞–≤–∫–∞–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'INTEGER', false, null, null);
        $this->addColumn('–ü—Ä–æ–µ–∫—Ç', '–ü—Ä–æ–µ–∫—Ç', 'INTEGER', true, null, null);
        $this->addColumn('–ì–æ–¥', '–ì–æ–¥', 'INTEGER', true, null, null);
        $this->addColumn('–ú–µ—Å—è—Ü', '–ú–µ—Å—è—Ü', 'INTEGER', true, null, null);
        $this->addColumn('–î–∞—Ç–∞–û—Ç—á—ë—Ç–∞', '–î–∞—Ç–∞–æ—Ç—á—ë—Ç–∞', 'DATE', true, null, null);
        $this->addColumn('–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç', '–£—á–∞—Å—Ç–æ–∫—Ä–∞–±–æ—Ç', 'INTEGER', true, null, null);
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
    } // buildRelations()

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param array  $row       resultset row.
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM
     *
     * @return string The primary key hash of the row
     */
    public static function getPrimaryKeyHashFromRow($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        return null;
    }

    /**
     * Retrieves the primary key from the DB resultset row
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, an array of the primary key columns will be returned.
     *
     * @param array  $row       resultset row.
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM
     *
     * @return mixed The primary key of the row
     */
    public static function getPrimaryKeyFromRow($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        return '';
    }
    
    /**
     * The class that the tableMap will make instances of.
     *
     * If $withPrefix is true, the returned path
     * uses a dot-path notation which is translated into a path
     * relative to a location on the PHP include_path.
     * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
     *
     * @param boolean $withPrefix Whether or not to return the path with the class name
     * @return string path.to.ClassName
     */
    public static function getOMClass($withPrefix = true)
    {
        return $withPrefix ? –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::CLASS_DEFAULT : –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::OM_CLASS;
    }

    /**
     * Populates an object of the default type or an object that inherit from the default.
     *
     * @param array  $row       row returned by DataFetcher->fetch().
     * @param int    $offset    The 0-based offset for reading from the resultset row.
     * @param string $indexType The index type of $row. Mostly DataFetcher->getIndexType().
                                 One of the class type constants TableMap::TYPE_PHPNAME, TableMap::TYPE_CAMELNAME
     *                           TableMap::TYPE_COLNAME, TableMap::TYPE_FIELDNAME, TableMap::TYPE_NUM.
     *
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     * @return array           (–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º object, last column rank)
     */
    public static function populateObject($row, $offset = 0, $indexType = TableMap::TYPE_NUM)
    {
        $key = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::getPrimaryKeyHashFromRow($row, $offset, $indexType);
        if (null !== ($obj = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::getInstanceFromPool($key))) {
            // We no longer rehydrate the object, since this can cause data loss.
            // See http://www.propelorm.org/ticket/509
            // $obj->hydrate($row, $offset, true); // rehydrate
            $col = $offset + –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::NUM_HYDRATE_COLUMNS;
        } else {
            $cls = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::OM_CLASS;
            /** @var –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º $obj */
            $obj = new $cls();
            $col = $obj->hydrate($row, $offset, false, $indexType);
            –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::addInstanceToPool($obj, $key);
        }

        return array($obj, $col);
    }

    /**
     * The returned array will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @param DataFetcherInterface $dataFetcher
     * @return array
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function populateObjects(DataFetcherInterface $dataFetcher)
    {
        $results = array();
    
        // set the class once to avoid overhead in the loop
        $cls = static::getOMClass(false);
        // populate the object(s)
        while ($row = $dataFetcher->fetch()) {
            $key = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::getPrimaryKeyHashFromRow($row, 0, $dataFetcher->getIndexType());
            if (null !== ($obj = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::getInstanceFromPool($key))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj->hydrate($row, 0, true); // rehydrate
                $results[] = $obj;
            } else {
                /** @var –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º $obj */
                $obj = new $cls();
                $obj->hydrate($row);
                $results[] = $obj;
                –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::addInstanceToPool($obj, $key);
            } // if key exists
        }

        return $results;
    }
    /**
     * Add all the columns needed to create a new object.
     *
     * Note: any columns that were marked with lazyLoad="true" in the
     * XML schema will not be added to the select list and only loaded
     * on demand.
     *
     * @param Criteria $criteria object containing the columns to add.
     * @param string   $alias    optional table alias
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function addSelectColumns(Criteria $criteria, $alias = null)
    {
        if (null === $alias) {
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_ID);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–¢–ò–ü–¢–ï–•–ù–ò–ö–ò);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–õ–ê–û–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–§–ê–ö–¢–û–¢–ì–†–£–ó–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–õ–ê–ù–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–§–ê–ö–¢–î–û–°–¢–ê–í–ö–ê–ö–û–õ–ò–ß–ï–°–¢–í–û);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ü–†–û–ï–ö–¢);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ì–û–î);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–ú–ï–°–Ø–¶);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–î–ê–¢–ê–û–¢–ß–Å–¢–ê);
            $criteria->addSelectColumn(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::COL_–£–ß–ê–°–¢–û–ö–†–ê–ë–û–¢);
        } else {
            $criteria->addSelectColumn($alias . '.id');
            $criteria->addSelectColumn($alias . '.–¢–∏–ø–¢–µ—Ö–Ω–∏–∫–∏');
            $criteria->addSelectColumn($alias . '.–ü–ª–∞–û–æ—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            $criteria->addSelectColumn($alias . '.–§–∞–∫—Ç–û—Ç–≥—Ä—É–∑–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            $criteria->addSelectColumn($alias . '.–ü–ª–∞–Ω–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            $criteria->addSelectColumn($alias . '.–§–∞–∫—Ç–î–æ—Å—Ç–∞–≤–∫–∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ');
            $criteria->addSelectColumn($alias . '.–ü—Ä–æ–µ–∫—Ç');
            $criteria->addSelectColumn($alias . '.–ì–æ–¥');
            $criteria->addSelectColumn($alias . '.–ú–µ—Å—è—Ü');
            $criteria->addSelectColumn($alias . '.–î–∞—Ç–∞–û—Ç—á—ë—Ç–∞');
            $criteria->addSelectColumn($alias . '.–£—á–∞—Å—Ç–æ–∫–†–∞–±–æ—Ç');
        }
    }

    /**
     * Returns the TableMap related to this object.
     * This method is not needed for general use but a specific application could have a need.
     * @return TableMap
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function getTableMap()
    {
        return Propel::getServiceContainer()->getDatabaseMap(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::DATABASE_NAME)->getTable(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::TABLE_NAME);
    }

    /**
     * Add a TableMap instance to the database for this tableMap class.
     */
    public static function buildTableMap()
    {
        $dbMap = Propel::getServiceContainer()->getDatabaseMap(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::DATABASE_NAME);
        if (!$dbMap->hasTable(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::TABLE_NAME)) {
            $dbMap->addTableObject(new –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap());
        }
    }

    /**
     * Performs a DELETE on the database, given a –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º or Criteria object OR a primary key value.
     *
     * @param mixed               $values Criteria or –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º object or primary key or array of primary keys
     *              which is used to create the DELETE statement
     * @param  ConnectionInterface $con the connection to use
     * @return int             The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
     *                         if supported by native driver or if emulated using Propel.
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
     public static function doDelete($values, ConnectionInterface $con = null)
     {
        if (null === $con) {
            $con = Propel::getServiceContainer()->getWriteConnection(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::DATABASE_NAME);
        }

        if ($values instanceof Criteria) {
            // rename for clarity
            $criteria = $values;
        } elseif ($values instanceof \–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º) { // it's a model object
            // create criteria based on pk value
            $criteria = $values->buildCriteria();
        } else { // it's a primary key, or an array of pks
            throw new LogicException('The –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º object has no primary key');
        }

        $query = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºQuery::create()->mergeWith($criteria);

        if ($values instanceof Criteria) {
            –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::clearInstancePool();
        } elseif (!is_object($values)) { // it's a primary key, or an array of pks
            foreach ((array) $values as $singleval) {
                –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::removeInstanceFromPool($singleval);
            }
        }

        return $query->delete($con);
    }

    /**
     * Deletes all rows from the –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ü–æ–ú–µ—Å—è—Ü–∞–º table.
     *
     * @param ConnectionInterface $con the connection to use
     * @return int The number of affected rows (if supported by underlying database driver).
     */
    public static function doDeleteAll(ConnectionInterface $con = null)
    {
        return –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºQuery::create()->doDeleteAll($con);
    }

    /**
     * Performs an INSERT on the database, given a –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º or Criteria object.
     *
     * @param mixed               $criteria Criteria or –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º object containing data that is used to create the INSERT statement.
     * @param ConnectionInterface $con the ConnectionInterface connection to use
     * @return mixed           The new primary key.
     * @throws PropelException Any exceptions caught during processing will be
     *                         rethrown wrapped into a PropelException.
     */
    public static function doInsert($criteria, ConnectionInterface $con = null)
    {
        if (null === $con) {
            $con = Propel::getServiceContainer()->getWriteConnection(–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::DATABASE_NAME);
        }

        if ($criteria instanceof Criteria) {
            $criteria = clone $criteria; // rename for clarity
        } else {
            $criteria = $criteria->buildCriteria(); // build Criteria from –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–º object
        }


        // Set the correct dbName
        $query = –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºQuery::create()->mergeWith($criteria);

        // use transaction because $criteria could contain info
        // for more than one table (I guess, conceivably)
        return $con->transaction(function () use ($con, $query) {
            return $query->doInsert($con);
        });
    }

} // –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap
// This is the static code needed to register the TableMap for this table with the main Propel class.
//
–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è–ø–æ–º–µ—Å—è—Ü–∞–ºTableMap::buildTableMap();
